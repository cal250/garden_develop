'use client'

import React, { Dispatch, SetStateAction, useMemo } from 'react'
import RadialPolygon from '@/components/molecules/radial-polygon/radial-polygon'
import { createIcon } from '@/components/atoms/icons/utils/create-icon'
import { WedgeData } from '@/components/atoms/polygon/utils'
import clsx from 'clsx'
import { useResponsiveValue } from '@/hooks/use-responsive-value'

const FlowerIcon = createIcon<{ active?: boolean }>({
  viewBox: '0 0 45 46',
  path: ({ active }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="45" height="46" fill="none" viewBox="0 0 45 46">
      <path
        fill={active ? 'rgb(var(--color-1))' : 'rgb(var(--color-13))'}
        stroke="#F469B5"
        d="M24.89 27.56a5.267 5.267 0 0 0 3.161-6.744 5.267 5.267 0 0 0-6.75-3.146 5.267 5.267 0 0 0-3.163 6.744 5.267 5.267 0 0 0 6.751 3.146Z"
      ></path>
      <path
        fill={active ? 'rgb(var(--color-4))' : 'rgb(var(--color-12))'}
        stroke="#fff"
        strokeWidth={active ? '2' : '0'}
        d="M14.277 39.03h.005c2.556.195 4.523-.82 6.029-2.464 1.05 1.763 2.206 3.067 3.533 3.832 1.713.987 3.566.997 5.509.221 1.932-.771 3.275-2.03 3.887-3.856.484-1.445.477-3.149.087-5.083 2.164.025 3.992-.353 5.398-1.214 1.745-1.068 2.694-2.79 2.892-4.978.333-3.34-1.763-6.685-5.751-7.524 1-1.53 1.581-3.039 1.648-4.505.09-1.974-.758-3.699-2.39-5.107-1.39-1.27-3.03-1.935-4.967-1.819-2.138.11-3.815 1.013-5.103 2.467-.838-1.62-1.835-2.852-3.045-3.629-1.627-1.044-3.485-1.172-5.495-.583-1.75.49-3.083 1.646-3.974 3.102l-.004.006-.003.007c-1.21 2.041-1.226 4.061-.59 6.016-1.853-.095-3.465.17-4.778.843-1.749.899-2.834 2.456-3.267 4.492l-.002.01c-.352 1.739-.176 3.51.841 5.082 1.174 1.87 2.812 2.902 4.763 3.295-.913 1.285-1.466 2.621-1.603 3.965-.196 1.907.459 3.7 1.86 5.213 1.196 1.3 2.723 2.066 4.52 2.211Zm9.902-12.402c-2.057.746-4.512-.423-5.265-2.498-.761-2.099.37-4.473 2.503-5.254 2.095-.704 4.533.485 5.233 2.549.71 2.097-.403 4.453-2.47 5.203Z"
      ></path>
    </svg>
  ),
})

// const AntIcon = createIcon<{ active?: boolean }>({
//   viewBox: '0 0 55 59',
//   path: ({ active }) => (
//     <svg xmlns="http://www.w3.org/2000/svg" width="55" height="59" fill="none" viewBox="0 0 55 59">
//       <path
//         fill={active ? 'rgb(var(--color-12))' : 'rgb(var(--color-12))'}
//         d="M42.763 54.534c.247-.311.391-.5.546-.687.161-.199.437-.379.474-.597.447-2.77.858-5.547 1.186-8.358-1.06 1.502-2.515 2.725-2.959 4.589-.091.383-.066.819.012 1.21.192.928.17 1.815-.46 2.651l.196-2.322-.288-.123c-.603 1.441-1.337 2.634-3.144 1.742-.354 1.168.638 1.56 1.023 2.284-.811-.162-1.301-.704-1.429-1.481-.123-.754-.64-1.072-1.115-1.569-1.484-1.555-3.237-.99-4.947-.922-.159.006-.314.125-.553.225 1.702 2.163 3.36 4.269 5.018 6.372q-.056.133-.112.265c-.212-.057-.511-.044-.62-.181a899 899 0 0 1-5.391-6.834c-.051-.062-.05-.166-.118-.398 1.52-.141 2.999-.279 4.535-.42-2.17-3.734-1.9-4.55.126-6.52-1.193-.134-2.034-.747-2.462-1.755-.49-1.143-.795-2.356-1.44-3.448-.252-.426-.181-1.038-.26-1.567-1.244.268-1.357.454-1.426 1.586a73 73 0 0 1-.431 4.553c-.04.318-.29.65-.519.903-1.47 1.611-2.979 3.186-4.433 4.81-.32.358-.574.847-.689 1.316-.501 2.066-.936 4.149-1.4 6.228-.047.219-.116.436-.364.634.027-.504.011-1.016.085-1.515.308-2.043.627-4.082.988-6.114.057-.321.317-.64.55-.895 1.307-1.435 2.577-2.913 3.981-4.251.919-.878 1.143-1.909 1.22-3.06.056-.837.175-1.672.178-2.507.006-1.179.558-2.025 1.419-2.757.246-.207.361-.568.537-.861-.313-.185-.599-.456-.937-.546-3.793-.994-3.822-1.024-7.053 1.221-.959.665-1.792.805-2.901.459-2.058-.641-4.158-1.152-6.257-1.654-.452-.11-1.005-.057-1.446.101-2.617.928-5.216 1.904-7.825 2.86-.174.065-.377.055-.652-.116.235-.138.453-.3.703-.409 2.498-1.086 4.98-2.206 7.51-3.208.64-.25 1.474-.259 2.154-.106 2.192.49 4.348 1.142 6.534 1.65.46.108 1.07-.009 1.491-.24.992-.552 1.935-1.2 2.845-1.878.638-.471 1.266-.587 2.02-.377.765.212 1.554.349 2.333.52q.121-.114.238-.23c-.27-.39-.488-.826-.814-1.157-1.185-1.195-2.706-1.695-4.305-2.053-.437-.098-.882-.374-1.213-.687-1.317-1.26-2.65-2.514-3.863-3.87-1.047-1.177-2.392-1.735-3.802-2.243-1.011-.365-2.08-.64-3.008-1.165-1.745-.987-3.535-.869-5.388-.574-.577.092-1.167.091-1.787.134.042-.157.045-.253.07-.261 2.444-.746 4.863-1.689 7.413-.251.928.521 1.96.936 2.996 1.18 2.24.522 3.75 2.002 5.225 3.596.852.919 1.745 1.808 2.642 2.684.226.217.526.39.823.496 1.43.514 2.864 1.018 4.312 1.47.196.06.63-.134.716-.32.272-.581.302-1.096-.461-1.468a63 63 0 0 1-4.488-2.402c-.738-.436-1.38-1.041-2.036-1.602-1.563-1.341-1.871-3.217-1.758-5.076.107-1.738.504-3.484.999-5.162.512-1.745 2.276-2.7 4.051-2.313 3.281.718 5.682 2.684 7.386 5.523.695 1.157.714 2.45.535 3.747-.063.443-.168.878-.157 1.351.738-1.804 1.36-3.669 2.252-5.394.81-1.572.606-2.9-.186-4.363-.679-1.258-1.086-2.667-1.774-3.919-.814-1.488-.764-3.028-.627-4.612.063-.723.122-1.446.185-2.169q.113.003.228.001c.075 1.085.081 2.177.25 3.25.157 1.012.386 2.04.762 2.993.812 2.055 1.77 4.06 2.597 6.111.153.377.084.93-.07 1.326-.99 2.535-2.031 5.054-3.055 7.58-.156.388-.366.765-.456 1.17-.288 1.271-.606 2.542-.735 3.833-.032.327.59.722.914 1.089.247-.24.52-.462.733-.73.167-.205.264-.467.385-.71.674-1.359.747-1.35 2.16-.659.96.474 1.976.833 3.075 1.288.117-.354.23-.648.312-.955.521-2 .947-4.034 1.582-6 .716-2.213 1.617-4.365 2.456-6.534.084-.213.236-.475.424-.563 1.144-.533 2.312-1.02 3.47-1.523q.075.141.147.29c-.543.34-1.054.755-1.638.998-1.31.538-1.844 1.627-2.411 2.824-1.77 3.73-2.283 7.81-3.437 11.709-.09.308-.166.62-.275 1.028-1.447-.563-2.785-1.049-4.095-1.609-.674-.289-1.022-.076-1.236.543-.204.595-.43 1.188-.568 1.797-.241 1.056.231 1.675 1.275 1.57.61-.06.946.164 1.272.591.728.95 1.506 1.864 2.202 2.835 1.411 1.98 3.538 2.99 5.57 4.092 1.585.858 3.305 1.464 4.958 2.18-1.058.31-2.201.396-3.283-.208-1.9-1.062-3.74-2.238-5.658-3.26-1.377-.731-2.013-2.093-3.008-3.144a7.2 7.2 0 0 1-.979-1.282c-.439-.76-.976-.889-1.874-.296.483.413.868.886 1.362 1.134 1.825.91 2.36 2.522 2.479 4.365.043.647-.041 1.296-.068 1.983.006.006.048.084.086.083 1.846-.076 2.48 1.117 2.761 2.656.209 1.131.39 2.27.63 3.687l3.58-4.971.191.107c-.238 1.71-.472 3.421-.712 5.127-.24 1.687-.503 3.368-.72 5.058-.167 1.303-.44 1.64-1.79 1.742z"
//       ></path>
//     </svg>
//   ),
// })

export const ZoneOctagon: React.FC<ZoneOctagonProps> = ({
  currentWedgeIndex,
  setCurrentWedgeIndex,
  octagonData,
  userAvatar,
  ecoIcon,
}) => {
  const innerOctagonSize = useResponsiveValue({
    base: 180,
    sm: 200,
    md: 225,
  })

  function onSegmentClick(index: number, wedgeIndex: number) {
    // console.log({ index, wedgeIndex })
    setCurrentWedgeIndex(wedgeIndex)
  }

  const newOctagonData: Array<WedgeData> = useMemo(() => {
    return octagonData.map((zone, index) => ({
      boundary: {
        // left: index === 1 ? { strokeWidth: 4 } : undefined,
        // right: index === 2 ? { strokeWidth: 4 } : undefined,
        outer:
          index === currentWedgeIndex
            ? { strokeWidth: 0, stroke: '#ffffff', className: 'shadow-yellow' }
            : undefined,
      },
      className: index === currentWedgeIndex ? 'bg-color-1 shadow-yellow' : '',
      segments: [
        {
          content: zone ? (
            <div>
              <h1
                className={clsx(
                  'text-[11px] sm:text-xs md:text-sm font-black leading-[100%]',
                  index === currentWedgeIndex ? 'text-color-4' : 'text-color-1',
                )}
              >
                {zone}
              </h1>
            </div>
          ) : (
            <div />
          ),
        },
        {
          content: ecoIcon ? (
            <div
              style={{
                rotate:
                  index === 3 || index === 4 || index === 5 || index === 6 ? '201deg' : '21deg',
              }}
            >
              <img
                alt="icon"
                src={ecoIcon}
                className="h-8 md:h-[50px] w-8 md:w-[50px] object-cover object-center"
              />
            </div>
          ) : (
            <FlowerIcon
              className="h-6 sm:h-8 md:h-10 w-6 sm:w-8 md:w-10"
              active={index === currentWedgeIndex}
            />
          ),
        },
      ],
    }))
  }, [octagonData, currentWedgeIndex, ecoIcon])

  return (
    <RadialPolygon
      sides={8}
      data={newOctagonData}
      rotation={45}
      numLayers={2}
      coreSize={0.43}
      onSegmentClick={onSegmentClick}
      boundary={{
        radii: { strokeWidth: 0, stroke: 'rgb(var(--color-2))' },
        chord: { strokeWidth: 0, stroke: 'rgb(var(--color-2))' },
        inner: { stroke: 'rgb(var(--color-4))', strokeWidth: 4 },
        outer: { stroke: 'rgb(var(--color-4))', strokeWidth: 5 },
      }}
      style={{
        background:
          'conic-gradient(from 89.99deg at 50% 50%, rgb(var(--color-8)) 0deg, rgb(var(--color-8)) 212.4deg, rgb(var(--color-9)) 313.2deg, rgb(var(--color-8)) 360deg)',
      }}
    >
      <img
        alt="banner"
        src={userAvatar ? userAvatar : '/assets/home/banner.png'}
        className="h-full object-cover object-center"
        style={{
          width: innerOctagonSize,
        }}
      />
    </RadialPolygon>
  )
}

interface ZoneOctagonProps {
  currentWedgeIndex: number
  octagonData: any[]
  setCurrentWedgeIndex: Dispatch<SetStateAction<number>>
  userAvatar: string
  currentSpecialEco?: string
  ecoIcon?: string | null
}
